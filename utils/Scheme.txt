// for user id auto increasement
var CounterSchema = Schema({
   _id: {type: String, required: true},
   seq: { type: Number, default: 0 }
});

// for users
var userSchema = new Schema({
  userId: { type: Number, required: true, unique: true},
  userName: String,
  nickName: String,
  gender: Number, // 0 male, 1 Female, 2 other
  carer: [ Number ], 
  careGiver: [ Number ],
  password: { type: String, required: true },
  createdTime: { type: Date, default: Date.now },
  updatedTime: { type: Date, default: Date.now },
  google: {
    name: String,
    toke: String,
    userid: String
  },
  fibit: {
    name: String,
    toke: String,
    userid: String

  },
  apple: {
    name: String,
    toke: String,
    userid: String

  }
});

// for health data
var HealthSchema = new Schema({
  userId: Number,
  modTime: { type: Date, default: Date.now },
  createTime: { type: Date, default: Date.now },
  steps: Number,
  distance: Number,
  activity: Number,
  sleepTime: Number,
  deepSleepTime: Number,
  heartRate: Number
});

// health box
var HealthBoxSchema = new Schema({
  createTime:  { type: Date, default: Date.now },
  stepsLevel: Number, // 0 normal, 1 average, 2 above
  distanceLevel: Number, // 0 low 1 average 2 above
  activity: Number,  // 0 low 1 average 2 above
  sleepTime: Number, // 0 low 1 average 2 above
  sleepQuality: Number // 0 low 1 average 2 above
});


// recommendation
var RecommendationSchema = new Schema({
  message_id: Number,
  type: Number, // article = 0, place = 1, nudge = 2
  scheduledTime: { type: Date, default: Date.now },
  sentTime: { type: Date, default: Date.now },
})

// recommendation example 


// 
var Recipe = new Scheme ({
  userId: Number,
  recommendation: Number,
  sourceType: Number, // system, user, developer
})